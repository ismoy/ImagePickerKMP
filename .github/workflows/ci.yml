name: CI

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Show environment and gradle info
        run: |
          echo "=== Environment Info ==="
          java -version
          echo "Gradle version:"
          ./gradlew --version
          echo "=== Gradle Wrapper Properties ==="
          cat gradle/wrapper/gradle-wrapper.properties
          echo "=== Project Structure ==="
          ls -la
          echo "=== Library Directory ==="
          ls -la library/

      - name: Build with debug info
        run: ./gradlew build --no-daemon --stacktrace --info

      - name: Run tests with debug
        run: ./gradlew test --no-daemon --stacktrace --info
        continue-on-error: true

      - name: Verify tests executed
        run: |
          echo "=== Verifying tests executed ==="
          ./gradlew test --dry-run
          echo "=== Test tasks available ==="
          ./gradlew tasks --group="verification"

      - name: Check test results
        run: |
          echo "=== Checking test results ==="
          ls -la library/build/test-results/ || echo "No test results directory"
          ls -la library/build/reports/tests/ || echo "No test reports directory"
          echo "=== Test summary ==="
          ./gradlew test --dry-run || echo "Could not run test dry-run"

      - name: Run ktlint with debug
        run: ./gradlew ktlintCheck --no-daemon --stacktrace --info
        continue-on-error: true

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            library/build/
            .gradle/
          retention-days: 7

      - name: Generate JaCoCo coverage report
        run: ./gradlew jacocoTestReport --no-daemon --stacktrace --info

      - name: Verify coverage thresholds
        run: ./gradlew jacocoTestCoverageVerification --no-daemon --stacktrace --info

      - name: Check JaCoCo report generation
        run: |
          echo "=== Checking JaCoCo report generation ==="
          ls -la library/build/reports/ || echo "No reports directory"
          ls -la library/build/reports/jacoco/ || echo "No jacoco directory"
          ls -la library/build/reports/jacoco/jacocoTestReport/ || echo "No jacocoTestReport directory"
          if [ -f "./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
            echo "✅ JaCoCo XML report exists"
            ls -la "./library/build/reports/jacoco/jacocoTestReport/"
          else
            echo "❌ JaCoCo XML report missing"
          fi

      - name: Parse coverage data
        id: coverage
        run: |
          echo "=== Checking for JaCoCo report ==="
          ls -la library/build/reports/jacoco/ || echo "No jacoco directory found"
          ls -la library/build/reports/jacoco/jacocoTestReport/ || echo "No jacocoTestReport directory found"
          
          if [ -f "./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
            echo "✅ JaCoCo XML report found"
            
            # Extract coverage data from XML - look for the summary counter at the end
            LINE_COVERAGE=$(grep -o 'type="LINE" missed="[^"]*" covered="[^"]*"' ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | tail -1 | sed 's/.*missed="\([^"]*\)" covered="\([^"]*\)".*/\2/' | sed 's/.*covered="\([^"]*\)".*/\1/' || echo "0")
            BRANCH_COVERAGE=$(grep -o 'type="BRANCH" missed="[^"]*" covered="[^"]*"' ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | tail -1 | sed 's/.*missed="\([^"]*\)" covered="\([^"]*\)".*/\2/' | sed 's/.*covered="\([^"]*\)".*/\1/' || echo "0")
            
            # Extract total lines and covered lines for detailed info
            TOTAL_LINES=$(grep -o 'type="LINE" missed="[^"]*" covered="[^"]*"' ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | tail -1 | sed 's/.*missed="\([^"]*\)" covered="\([^"]*\)".*/\1/' || echo "0")
            COVERED_LINES=$(grep -o 'type="LINE" missed="[^"]*" covered="[^"]*"' ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | tail -1 | sed 's/.*missed="\([^"]*\)" covered="\([^"]*\)".*/\2/' || echo "0")
            
            # Calculate percentage
            if [ "$TOTAL_LINES" -gt 0 ] && [ "$COVERED_LINES" -ge 0 ]; then
                TOTAL_WITH_COVERED=$((TOTAL_LINES + COVERED_LINES))
                LINE_PERCENTAGE=$(echo "scale=1; $COVERED_LINES * 100 / $TOTAL_WITH_COVERED" | bc -l 2>/dev/null || echo "0")
                BRANCH_PERCENTAGE=$(echo "scale=1; $BRANCH_COVERAGE * 100 / $TOTAL_WITH_COVERED" | bc -l 2>/dev/null || echo "0")
            else
                LINE_PERCENTAGE="0"
                BRANCH_PERCENTAGE="0"
            fi
            
            echo "Line coverage: $LINE_PERCENTAGE%"
            echo "Branch coverage: $BRANCH_PERCENTAGE%"
            echo "Total lines: $TOTAL_LINES"
            echo "Covered lines: $COVERED_LINES"
            
            echo "line_coverage=$LINE_PERCENTAGE" >> $GITHUB_OUTPUT
            echo "branch_coverage=$BRANCH_PERCENTAGE" >> $GITHUB_OUTPUT
            echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
            echo "covered_lines=$COVERED_LINES" >> $GITHUB_OUTPUT
            echo "has_coverage=true" >> $GITHUB_OUTPUT
          else
            echo "❌ JaCoCo XML report not found"
            echo "line_coverage=0" >> $GITHUB_OUTPUT
            echo "branch_coverage=0" >> $GITHUB_OUTPUT
            echo "total_lines=0" >> $GITHUB_OUTPUT
            echo "covered_lines=0" >> $GITHUB_OUTPUT
            echo "has_coverage=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: library/build/reports/jacoco/jacocoTestReport/
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ismoy/ImagePickerKMP
          file: ./library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment PR with coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Read the JaCoCo XML report to extract coverage data
              const xmlPath = './library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml';
              if (fs.existsSync(xmlPath)) {
                const xmlContent = fs.readFileSync(xmlPath, 'utf8');
                
                // Extract coverage percentages using regex
                const lineMatch = xmlContent.match(/LINE="(\d+\.?\d*)"/);
                const branchMatch = xmlContent.match(/BRANCH="(\d+\.?\d*)"/);
                
                if (lineMatch && branchMatch) {
                  const lineCoverage = parseFloat(lineMatch[1]);
                  const branchCoverage = parseFloat(branchMatch[1]);
                  
                  const comment = `## 📊 Coverage Report
                  
                  **Line Coverage:** ${lineCoverage.toFixed(1)}%
                  **Branch Coverage:** ${branchCoverage.toFixed(1)}%
                  
                  📈 View detailed report: [Codecov](https://codecov.io/gh/ismoy/ImagePickerKMP)
                  
                  ---
                  *This report was generated automatically by CI*`;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.log('Could not generate coverage comment:', error.message);
            }

      - name: Notify coverage changes
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const xmlPath = './library/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml';
              if (fs.existsSync(xmlPath)) {
                const xmlContent = fs.readFileSync(xmlPath, 'utf8');
                const lineMatch = xmlContent.match(/LINE="(\d+\.?\d*)"/);
                
                if (lineMatch) {
                  const coverage = parseFloat(lineMatch[1]);
                  
                  if (coverage < 20) {
                    console.log('⚠️ Coverage is below 20%. Consider adding more tests.');
                  } else if (coverage < 50) {
                    console.log('📈 Coverage is improving. Keep adding tests!');
                  } else {
                    console.log('🎉 Great coverage! Keep it up!');
                  }
                }
              }
            } catch (error) {
              console.log('Could not analyze coverage:', error.message);
            }

      - name: Generate Discord message
        id: discord_message
        run: |
          if [ "${{ steps.coverage.outputs.has_coverage }}" == "true" ]; then
            COVERAGE_TEXT="📊 **Coverage Report:**
          • Line Coverage: ${{ steps.coverage.outputs.line_coverage }}% (${{ steps.coverage.outputs.covered_lines }} of ${{ steps.coverage.outputs.total_lines }} lines)
          • Branch Coverage: ${{ steps.coverage.outputs.branch_coverage }}%"
          else
            COVERAGE_TEXT="📊 **Coverage:** Not available"
          fi
          
          MESSAGE="🎉 **Build Success** - ImagePickerKMP

          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}

          $COVERAGE_TEXT

          **Workflow:** ${{ github.workflow }}

          🔗 **PR:** ${{ github.event.pull_request.html_url || 'N/A' }}
          🔗 **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Notify Discord on Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: ${{ steps.discord_message.outputs.message }}

      - name: Generate Discord failure message
        id: discord_failure_message
        run: |
          # Captura las últimas 30 líneas del log de build (ajusta según tu necesidad)
          LOG_FILE=build.log
          if [ -f "$LOG_FILE" ]; then
            ERROR_LOG=$(tail -n 30 "$LOG_FILE")
          else
            ERROR_LOG="No build.log found. See Actions log for details."
          fi

          MESSAGE="❌ **Build Failed** - ImagePickerKMP

          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}

          **Workflow:** ${{ github.workflow }}

          **Error log (last lines):**
          \`\`\`
          $ERROR_LOG
          \`\`\`

          🔗 **PR:** ${{ github.event.pull_request.html_url || 'N/A' }}
          🔗 **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Notify Discord on Failure
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: ${{ steps.discord_failure_message.outputs.message }}

  detekt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Run Detekt
        id: detekt_run
        run: ./gradlew detekt --no-daemon --stacktrace
      - name: Count Detekt issues
        id: detekt_issues
        run: |
          DETEKT_REPORT=library/build/reports/detekt/detekt.xml
          ISSUES=0
          if [ -f "$DETEKT_REPORT" ]; then
            COUNT=$(grep -c '<error ' "$DETEKT_REPORT" 2>/dev/null || true)
            if [[ "$COUNT" =~ ^[0-9]+$ ]]; then
              ISSUES=$COUNT
            fi
          fi
          echo "DEBUG: ISSUES=$ISSUES"
          echo "DEBUG: GITHUB_OUTPUT=$GITHUB_OUTPUT"
          echo "issues=${ISSUES}" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Notify Discord on Detekt Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ✅ **Detekt Success** - ImagePickerKMP
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}
            Detekt Issues: ${{ steps.detekt_issues.outputs.issues }}
            🔗 View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Notify Discord on Detekt Failure
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ❌ **Detekt Failed** - ImagePickerKMP
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Workflow: ${{ github.workflow }}
            Detekt Issues: ${{ steps.detekt_issues.outputs.issues }}
            🔗 View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 